# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: goodAhSQLPassword!

    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: test_db
      DB_USER: root
      DB_PASSWORD: goodAhSQLPassword!
      MYSQL_PASSWORD: goodAhSQLPassword!

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.3'

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h ${{ env.DB_HOST }} -uroot -p${{ env.MYSQL_PASSWORD }} --silent; do
            echo 'Waiting for MySQL...'
            sleep 3
          done

      - name: Create Database
        run: |
          mysql -h ${{ env.DB_HOST }} -uroot -p${{ env.MYSQL_PASSWORD }} \
          -e "CREATE DATABASE IF NOT EXISTS ${{ env.DB_DATABASE }};"

      - name: Set up environment variables
        run: echo "MYSQL_PASSWORD=goodAhSQLPassword!" >> $GITHUB_ENV

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test ./... -v | tee test-output.log

      - name: Analyze Failures
        run: |
          cat test-output.log | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' \
          | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' 
          if grep -q "FAIL" test-output.log; then
            exit 1
          fi

      - name: Code Coverage Test
        if: success()
        run: go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out
